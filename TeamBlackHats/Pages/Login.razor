@page "/login"
@using System.Text.Json
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Text
@using TeamBlackHats.Services
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<h4>Login</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form>
            <div class="text-danger"></div>
            <div class="form-group">
                <label for="username" class="control-label">Username:</label>
                <input class="form-control" @bind="user.Username" />
            </div>
            <br />
            <div class="form-group">
                <label asp-for="Password" class="control-label">Password:</label>
                <input type="password" class="form-control" @bind="user.Password"/>
            </div>
            <br />
            <div class="form-group">
                <button type="button" class="btn btn-primary" @onclick=SubmitLogin >Login</button>
            </div>
        </form>
        <br />
        @if(loginFailed)
        {
            <p class="text-danger">Incorrect username or password</p>
        }
    </div>
</div>

@code {
    private string API_URL = "https://localhost:7275/api/BlackHatsApp/";
    private string API_AUTH_PATH = "Authenticate";
    private bool loginFailed = false;

    private class UserModel
    {
        public int Userid { get; set; }
        public string Username { get; set; } = "";
        public string Password { get; set; } = "";
    }

    private UserModel user = new UserModel() { Userid = 0 };

    /*
    * Sends an HTTP POST request to the API to check for any valid users that match the username & password
    */
    public async Task SubmitLogin()
    {
        var jsonContent = JsonSerializer.Serialize(user);
        var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

        using var httpClient = new HttpClient();
        HttpResponseMessage response = await httpClient.PostAsync(API_URL + API_AUTH_PATH, content); 
        using var responseStream = await response.Content.ReadAsStreamAsync();
        IEnumerable<object>? userIds = await JsonSerializer.DeserializeAsync<IEnumerable<object>>(responseStream);

        // check if any user is valid
        if(userIds == null || userIds.Count() == 0)
        {
            loginFailed = true;
        }
        else
        {
            AuthState.SetAuthenticatedUser(user.Username);
            NavigationManager.NavigateTo("/", true);
        }
    }
}
